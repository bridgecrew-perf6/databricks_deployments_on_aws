AWSTemplateFormatVersion: 2010-09-09
Description: Deploys peered VPCs

#-------------------------------------------------------------------------
Parameters:

  ResourceOwner:
    Description: The value of the Owner tag in the created resources
    Type: String

  SourceRegion:
    Description: The source region, where no E2 workspace deployment is available
    Type: String
    AllowedValues:
      - sa-east-1
      - eu-north-1
      - eu-west-3
      - eu-south-1
      - me-south-1
      - af-south-1
      - ap-east-1
      - ap-northeast-3
      - ap-southeast-3
    ConstraintDescription: AWS regions without E2 Workspace deployment
    Default: eu-west-3

  WorkspaceRegion:
    Description: The region where a Databricks Workspace can be deployed
    Type: String
    AllowedValues:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - ca-central-1
      - eu-west-1
      - eu-west-2
      - eu-central-1
      - ap-northeast-1
      - ap-southeast-1
      - ap-southeast-2
      - ap-south-1
    ConstraintDescription: AWS regions with E2 Workspace deployment
    Default: eu-west-1

  DBSVPCCidrBlock:
    Description: The CIDR block of the VPC for the Databricks data plane
    Type: String
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/(1[6-9]|2[0-3])$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-23
    Default: 10.30.0.0/16
  
  DBSPublicSubnetCidrBlock:
    Description: The CIDR block of the public subnet for the Databricks data plane
    Type: String
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/(1[7-9]|2[0-5])$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/17-25
    Default: 10.30.0.0/24
  
  DBSPrivateSubnet1CidrBlock:
    Description: The CIDR block of the first private subnet for the Databricks data plane
    Type: String
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/(1[7-9]|2[0-5])$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/17-25
    Default: 10.30.4.0/22
  
  DBSPrivateSubnet2CidrBlock:
    Description: The CIDR block of the second private subnet for the Databricks data plane
    Type: String
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/(1[7-9]|2[0-5])$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/17-25
    Default: 10.30.8.0/22

  SrcVPCCidrBlock:
    Description: The CIDR block of the VPC in the source region
    Type: String
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/(1[6-9]|2[0-3])$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-23
    Default: 10.31.0.0/16
  
  SrcPrivateSubnet1CidrBlock:
    Description: The CIDR block of the first private subnet  in the source region
    Type: String
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/(1[7-9]|2[0-5])$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/17-25
    Default: 10.31.4.0/22

  SrcPrivateSubnet2CidrBlock:
    Description: The CIDR block of the second private subnet  in the source region
    Type: String
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/(1[7-9]|2[0-5])$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/17-25
    Default: 10.31.8.0/22

  DBSRootBucketName:
    Description: The name of the bucket holding the Databricks workspace data
    Type: String
    AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
    ConstraintDescription: 3 to 63 characters; must contain only lowercase letters, numbers, periods (.), and dashes (-)

  DBSEncryptionKeyArn:
    Description: The existing ARN of the KMS key used for the encryption/decryption of Databricks notebooks
    Type: String
    Default: ""

  DBSEncryptionKeyAlias:
    Description: The existing alias of the KMS key used for the encryption/decryption of Databricks notebooks
    Type: String
    Default: ""
  
  DBSInstanceProfileArn:
    Description: An existing ARN of the instance profile for the by Databricks clusters
    Type: String
    Default: ""
  
  DBSCrossAccountRoleArn:
    Description: An existing ARN for the cross-account IAM role used by Databricks to manage resources in the VPC
    Type: String
    Default: ""

  DBSAccountId:
    Description: The Databricks account id
    Type: String

  DBSUsername:
    Description: The Databricks account user name
    Type: String

  DBSPassword:
    Description: The Databricks account password
    Type: String
    NoEcho: true

  PeerVpcId:
    Description: The Id of the peer VPC
    Type: String
    Default: ""

  VpcPeerConnectionId:
    Description: The Id of the VPC connection
    Type: String
    Default: ""

#-------------------------------------------------------------------------
Conditions:

  IsSourceRegion:
    !Equals [!Ref AWS::Region, !Ref SourceRegion]

  IsWorkspaceRegion:
    !Equals [!Ref AWS::Region, !Ref WorkspaceRegion]

  UpdateRouteTablesForVpcPeerConnectivity:
    !Or [!Equals [!Ref AWS::Region, !Ref SourceRegion], !Not [!Equals [!Ref VpcPeerConnectionId, "" ] ] ]  

  UpdatePublicRouteTablesForVpcPeerConnectivity:
    !And [!Equals [!Ref AWS::Region, !Ref WorkspaceRegion], !Not [!Equals [!Ref VpcPeerConnectionId, "" ] ] ]

  CreateEncryptionKey:
    !And [!Equals [!Ref DBSEncryptionKeyArn, ""], !Equals [!Ref AWS::Region, !Ref WorkspaceRegion] ]

  CreateInstanceProfile:
    !And [!Equals [!Ref DBSInstanceProfileArn, ""], !Equals [!Ref AWS::Region, !Ref WorkspaceRegion] ]

  CreateCrossAccountRole:
    !And [!Equals [!Ref DBSCrossAccountRoleArn, ""], !Equals [!Ref AWS::Region, !Ref WorkspaceRegion] ]

  CreateDatabricksWorkspace:
    !And [!Equals [!Ref AWS::Region, !Ref WorkspaceRegion], !Not [!Equals [!Ref VpcPeerConnectionId, "" ] ] ]

#-------------------------------------------------------------------------
Resources:

  # The root bucket
  DBSRootBucket:
    Condition: IsWorkspaceRegion
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DBSRootBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault: 
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
  
  DBSRootBucketPolicy:
    Condition: IsWorkspaceRegion
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DBSRootBucket
      PolicyDocument:
        Statement:
          - Sid: Grant Databricks Access to Root S3
            Effect: Allow
            Principal:
              "AWS": "414351767826"
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource:
              - !Sub arn:aws:s3:::${DBSRootBucketName}
              - !Sub arn:aws:s3:::${DBSRootBucketName}/*


  # The VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !If [IsWorkspaceRegion, !Ref DBSVPCCidrBlock, !Ref SrcVPCCidrBlock]
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksVPC
  
  # Internet gateway
  VpcIgw:
    Condition: IsWorkspaceRegion
    Type: AWS::EC2::InternetGateway
    DependsOn: Vpc
    Properties:
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksVpcIgw
  #... attached to the VPC
  VpcIgwAttachment:
    Condition: IsWorkspaceRegion
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !GetAtt VpcIgw.InternetGatewayId
      VpcId: !Ref Vpc
  
  # The subnet for the public resources, such as the NAT Gateway
  PublicSubnet:
    Condition: IsWorkspaceRegion
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref Vpc
      CidrBlock: !Ref DBSPublicSubnetCidrBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksPublicSubnet

  # The two private subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref Vpc
      CidrBlock: !If [IsWorkspaceRegion, !Ref DBSPrivateSubnet1CidrBlock, !Ref SrcPrivateSubnet1CidrBlock]
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksPrivateSubnet1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref Vpc
      CidrBlock: !If [IsWorkspaceRegion, !Ref DBSPrivateSubnet2CidrBlock, !Ref SrcPrivateSubnet2CidrBlock]
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksPrivateSubnet2

  # The Elastic IP and the NAT Gateway
  ElasticIPForNat:
    Condition: IsWorkspaceRegion
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
      Tags: 
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksNatElasticIP
  Nat:
    Condition: IsWorkspaceRegion
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIPForNat.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet
      Tags: 
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksNat

  # The route table attached to the public subnet
  PublicRouteTable:
    Condition: IsWorkspaceRegion
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksPublicRouteTable
  # Route to the internet
  RouteToInternetInPublicRouteTable:
    Condition: IsWorkspaceRegion
    DependsOn: VpcIgwAttachment
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VpcIgw
  # Associate the route table to the subnets
  PublicSubnetRouteTableAssociation:
    Condition: IsWorkspaceRegion
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # The route table for the private subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksPrivateRouteTable
  # Route to the internet
  RouteToInternetInPrivateRouteTable:
    Condition: IsWorkspaceRegion
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Nat
  # Associate the route table to the subnets
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # The S3 gateway endpoint
  S3GatewayEndpoint:
    Condition: IsWorkspaceRegion
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      VpcId: !Ref Vpc
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable

  # The security group for the workspace
  WorkspaceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-WorkspaceSG
      VpcId: !Ref Vpc
      GroupDescription: Allow access from within the same security group
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: Name
          Value: !Sub ${AWS::StackName}-WorkspaceSG
  # Allow all access from the same security group
  WorkspaceSecurityGroupDefaultTcpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !GetAtt WorkspaceSecurityGroup.GroupId
      Description: Allow all tcp inbound access from the same security group
      SourceSecurityGroupId: !GetAtt WorkspaceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
  WorkspaceSecurityGroupDefaultUdpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !GetAtt WorkspaceSecurityGroup.GroupId
      Description: Allow all udp inbound access from the same security group
      SourceSecurityGroupId: !GetAtt WorkspaceSecurityGroup.GroupId
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
  WorkspaceSecurityGroupDefaultTcpEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt WorkspaceSecurityGroup.GroupId
      Description: Allow all tcp output access from the same security group
      DestinationSecurityGroupId: !GetAtt WorkspaceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
  WorkspaceSecurityGroupDefaultUdpEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt WorkspaceSecurityGroup.GroupId
      Description: Allow all udp output access from the same security group
      DestinationSecurityGroupId: !GetAtt WorkspaceSecurityGroup.GroupId
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
  # Allow all access from the peer VPC
  WorkspaceSecurityGroupTcpIngressFromPeerVpc:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !GetAtt WorkspaceSecurityGroup.GroupId
      Description: Allow all tcp inbound access from the peer VPC
      CidrIp: !If [IsSourceRegion, !Ref DBSVPCCidrBlock, !Ref SrcVPCCidrBlock]
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
  WorkspaceSecurityGroupUdpIngressFromPeerVpc:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !GetAtt WorkspaceSecurityGroup.GroupId
      Description: Allow all udp inbound access from the peer VPC
      CidrIp: !If [IsSourceRegion, !Ref DBSVPCCidrBlock, !Ref SrcVPCCidrBlock]
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
  WorkspaceSecurityGroupTcpEgressToPeerVpc:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt WorkspaceSecurityGroup.GroupId
      Description: Allow all tcp output access to the peer VPC
      CidrIp: !If [IsSourceRegion, !Ref DBSVPCCidrBlock, !Ref SrcVPCCidrBlock]
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
  WorkspaceSecurityGroupUdpEgressToPeerVpc:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt WorkspaceSecurityGroup.GroupId
      Description: Allow all udp output access to the peer VPC
      CidrIp: !If [IsSourceRegion, !Ref DBSVPCCidrBlock, !Ref SrcVPCCidrBlock]
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
  # Allow all outgoing HTTPS access  
  WorkspaceSecurityGroupEgressForHttps:
    Condition: IsWorkspaceRegion
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt WorkspaceSecurityGroup.GroupId
      Description: Allow accessing Databricks infrastructure, cloud data sources, and library repositories
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  # Allow all outgoing MySQL access  
  WorkspaceSecurityGroupEgressForMetastore:
    Condition: IsWorkspaceRegion
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt WorkspaceSecurityGroup.GroupId
      Description: Allow accessing the Databricks metastore
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306

  # The S3 endpoint
  S3InterfaceEndpoint:
    Condition: IsSourceRegion
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      PrivateDnsEnabled: false
      SecurityGroupIds: 
        - !GetAtt WorkspaceSecurityGroup.GroupId
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # The STS endpoint
  STSInterfaceEndpoint:
    Condition: IsWorkspaceRegion
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sts
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !GetAtt WorkspaceSecurityGroup.GroupId
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # The Kinesis endpoint
  KinesisInterfaceEndpoint:
    Condition: IsWorkspaceRegion
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      ServiceName: !Sub com.amazonaws.${AWS::Region}.kinesis-streams
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !GetAtt WorkspaceSecurityGroup.GroupId
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # The KMS CMK for the notebook encryption
  EncryptionKey:
    Condition: CreateEncryptionKey
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key used by Databricks to encrypt/decrypt the notebooks for a workspace
      Enabled: true
      KeyPolicy:
        Statement:
          - Sid: Enable Owner Account Permissions
            Effect: Allow
            Principal:
              "AWS": !Ref AWS::AccountId
            Action: kms:*
            Resource: "*"
          - Sid: Allow Databricks to use KMS key for encryption and decryption
            Effect: Allow
            Principal:
              "AWS": "414351767826"
            Action:
              - kms:Encrypt
              - kms:Decrypt
            Resource: "*"
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
  # The alias for the key
  EncryptionKeyAlias:
    Condition: CreateEncryptionKey
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}
      TargetKeyId: !Ref EncryptionKey

  # The VPC peer connection
  PeerVpcConnection:
    Condition: IsSourceRegion
    Type: AWS::EC2::VPCPeeringConnection
    Properties: 
      PeerOwnerId: !Ref AWS::AccountId
      PeerRegion: !Ref WorkspaceRegion
      PeerVpcId: !Ref PeerVpcId
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: Name
          Value: !Sub ${AWS::StackName}-PeerVpcConnection
      VpcId: !Ref Vpc

  # The routes to the peering VPC
  RouteToPeeringVPCInPublicRouteTable:
    Condition: UpdatePublicRouteTablesForVpcPeerConnectivity
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !If [IsSourceRegion, !Ref DBSVPCCidrBlock, !Ref SrcVPCCidrBlock]
      VpcPeeringConnectionId: !If [IsSourceRegion, !Ref PeerVpcConnection, !Ref VpcPeerConnectionId]

  RouteToPeeringVPCInPrivateRouteTable:
    Condition: UpdateRouteTablesForVpcPeerConnectivity
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !If [IsSourceRegion, !Ref DBSVPCCidrBlock, !Ref SrcVPCCidrBlock]
      VpcPeeringConnectionId: !If [IsSourceRegion, !Ref PeerVpcConnection, !Ref VpcPeerConnectionId]

  # The private hosted zone for the s3 endoint
  PrivateHostedZoneForS3Endoint:
    Condition: IsSourceRegion
    DependsOn: PeerVpcConnection
    Type: AWS::Route53::HostedZone
    Properties: 
      Name: !Sub s3.${AWS::Region}.amazonaws.com
      HostedZoneConfig: 
        Comment: !Sub Private hosted zone for s3.${AWS::Region}.amazonaws.com
      VPCs:
        - VPCId: !Ref PeerVpcId
          VPCRegion: !Ref WorkspaceRegion
      HostedZoneTags: 
        - Key: Owner
          Value: !Ref ResourceOwner

  # The private hosted zone for the s3 endoint
  RecordSetForPrivateHostedZoneForS3Endoint:
    Condition: IsSourceRegion
    Type: AWS::Route53::RecordSet
    Properties: 
      Name: !Sub s3.${AWS::Region}.amazonaws.com
      Type: A
      AliasTarget: 
        DNSName: !Select [1, !Split [":", !Select [1, !GetAtt S3InterfaceEndpoint.DnsEntries] ] ]
        HostedZoneId: !Select [0, !Split [":", !Select [1, !GetAtt S3InterfaceEndpoint.DnsEntries] ] ]
      Comment: Points to the VPC endpoint
      HostedZoneId: !Ref PrivateHostedZoneForS3Endoint

  # The private hosted zone for the s3 endoint
  RecordSetForExistingBucket:
    Condition: IsSourceRegion
    Type: AWS::Route53::RecordSet
    Properties: 
      Name: !Sub "*.s3.${AWS::Region}.amazonaws.com"
      Type: A
      AliasTarget: 
        DNSName: !Select [1, !Split [":", !Select [1, !GetAtt S3InterfaceEndpoint.DnsEntries] ] ]
        HostedZoneId: !Select [0, !Split [":", !Select [1, !GetAtt S3InterfaceEndpoint.DnsEntries] ] ]
      Comment: Points to the VPC endpoint
      HostedZoneId: !Ref PrivateHostedZoneForS3Endoint

  # The role for the instance profile for the cluster
  DBSInstanceProfileRole:
    Condition: CreateInstanceProfile
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DBSInstanceProfileRole
      Description: The role used for the instance profile for the by Databricks clusters
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              "Service": ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-DBSInstanceProfilePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:PutObjectAcl
                  - sts:*
                  - kinesis:*
                Resource: '*'
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
  # The instance profile
  DBSInstanceProfile:
    Condition: CreateInstanceProfile
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-DBSInstanceProfile
      Roles:
        - !Ref DBSInstanceProfileRole

  # The cross account role for databricks
  DBSCrossAccountIAMRole:
    Condition: CreateCrossAccountRole
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-CrossAccountRole
      Description: The cross-account IAM role used by Databricks to manage resources in the VPC
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              "AWS": "414351767826"
            Action:
              - 'sts:AssumeRole'
            Condition:
              "StringEquals":
                "sts:ExternalId": !Ref DBSAccountId
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-CrossAccountRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: NonResourceBasedPermissions
                Effect: Allow
                Action:
                  - ec2:CancelSpotInstanceRequests
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeIamInstanceProfileAssociations
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeInstances
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeNatGateways
                  - ec2:DescribeNetworkAcls
                  - ec2:DescribePrefixLists
                  - ec2:DescribeReservedInstancesOfferings
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSpotInstanceRequests
                  - ec2:DescribeSpotPriceHistory
                  - ec2:DescribeSubnets
                  - ec2:DescribeVolumes
                  - ec2:DescribeVpcAttribute
                  - ec2:DescribeVpcs
                  - ec2:CreateTags
                  - ec2:DeleteTags
                  - ec2:RequestSpotInstances
                  - ec2:RunInstances
                Resource: '*'
              - Sid: AllowPassRoleForInstanceProfile
                Effect: Allow
                Action: iam:PassRole
                # Resource: !GetAtt DBSInstanceProfileRole.Arn
                Resource: '*'
              - Sid: InstancePoolsSupport
                Effect: Allow
                Action:
                  - ec2:AssociateIamInstanceProfile
                  - ec2:DisassociateIamInstanceProfile
                  - ec2:ReplaceIamInstanceProfileAssociation
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
                Condition:
                  "StringEquals":
                    "ec2:ResourceTag/Vendor": "Databricks"
              - Sid: EC2TerminateInstancesTag
                Effect: Allow
                Action: ec2:TerminateInstances
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
                Condition:
                  "StringEquals":
                    "ec2:ResourceTag/Vendor": "Databricks"
              - Sid: EC2AttachDetachVolumeTag
                Effect: Allow
                Action:
                  - ec2:AttachVolume
                  - ec2:DetachVolume
                Resource:
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*
                Condition:
                  "StringEquals":
                    "ec2:ResourceTag/Vendor": "Databricks"
              - Sid: EC2CreateVolumeByTag
                Effect: Allow
                Action: ec2:CreateVolume
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*
                Condition:
                  "StringEquals":
                    "ec2:ResourceTag/Vendor": "Databricks"
              - Sid: EC2DeleteVolumeByTag
                Effect: Allow
                Action: ec2:DeleteVolume
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*
                Condition:
                  "StringEquals":
                    "ec2:ResourceTag/Vendor": "Databricks"
              - Sid: AllowCreateServiceLinkedRole
                Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                  - iam:PutRolePolicy
                Resource: arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot
                Condition:
                  "StringLike":
                    "iam:AWSServiceName": spot.amazonaws.com
              - Sid: VpcNonresourceSpecificActions
                Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${WorkspaceSecurityGroup}
                Condition:
                  "StringEquals":
                    "ec2:vpc": !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${Vpc}
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner


  #------ The Databricks workspace related resources
  DBSCredentialsConfiguration:
    Condition: CreateDatabricksWorkspace
    Type: Custom::DBSCredentialsConfiguration
    Properties:
      ServiceToken: !ImportValue dbs-account-api-CredentialsConfigurationFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      CredentialsName: !Sub ${AWS::StackName}_credentials
      CrossAccountRoleArn: !If [CreateCrossAccountRole, !GetAtt DBSCrossAccountIAMRole.Arn, !Ref DBSCrossAccountRoleArn]

  DBSStorageConfiguration:
    Condition: CreateDatabricksWorkspace
    Type: Custom::DBSStorageConfiguration
    Properties:
      ServiceToken: !ImportValue dbs-account-api-StorageConfigurationFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      StorageName: !Sub ${AWS::StackName}_storage
      RootBucket: !Ref DBSRootBucket

  DBSManagedKeysConfiguration:
    Condition: CreateDatabricksWorkspace
    Type: Custom::DBSManagedKeysConfiguration
    Properties:
      ServiceToken: !ImportValue dbs-account-api-ManagedKeysConfigurationFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      KeyArn: !If [ CreateEncryptionKey, !GetAtt EncryptionKey.Arn, !Ref DBSEncryptionKeyArn]
      KeyAlias: !If [ CreateEncryptionKey, !Ref EncryptionKeyAlias, !Sub "alias/${DBSEncryptionKeyAlias}" ]
      UseCases:
        - MANAGED_SERVICES

  DBSNetworkConfiguration:
    Condition: CreateDatabricksWorkspace
    Type: Custom::DBSNetworkConfiguration
    Properties:
      ServiceToken: !ImportValue dbs-account-api-NetworkConfigurationFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      NetworkName: !Sub ${AWS::StackName}_network
      VpcId: !Ref Vpc
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref WorkspaceSecurityGroup

  DatabricksWorkspace:
    Condition: CreateDatabricksWorkspace
    Type: Custom::DatabricksWorkspace
    Properties:
      ServiceToken: !ImportValue dbs-account-api-WorkspaceFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      WorkspaceName: !Sub ${AWS::StackName}_workspace
      CredentialsId: !Ref DBSCredentialsConfiguration
      StorageId: !Ref DBSStorageConfiguration
      NetworkId: !Ref DBSNetworkConfiguration
      ManagedServicesKeyId: !Ref DBSManagedKeysConfiguration


#-------------------------------------------------------------------------
Outputs:

  VpcId:
    Description: The Id of the created VPC
    Value: !Ref Vpc
  
  PeerVpcConnectionId:
    Description: The Id of the VPC peering connection
    Value: !If [IsSourceRegion, !Ref PeerVpcConnection, !Ref VpcPeerConnectionId]

  InstanceProfileArn:
    Condition: CreateInstanceProfile
    Description: The ARN of the created instance profile
    Value: !GetAtt DBSInstanceProfile.Arn